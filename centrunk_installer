#!/bin/bash

##### VARIABLE ASSIGNMENT #####
##### DO NOT CHANGE THESE #####

BASE_DIR='/opt'
GIT_URL='https://github.com/DVMProject/dvmhost.git'
INSTALL_LOC='/opt/dvm'
CONFIG_DIR='/opt/dvm/configs'
FW_DIR='/opt/dvmfirmware-hs/'
FW_GIT_URL='https://github.com/DVMProject/dvmfirmware-hs.git'
FW_TOOLS_F10X='https://github.com/DVMProject/STM32F10X_Platform.git'
FW_TOOLS_F4='https://github.com/DVMProject/STM32F4XX_Platform.git'
CONFIG_REPO='https://github.com/lastation4/centrunk-default-config.git'


##### FUNCTION DEFINITIONS #####

clean_environment()
{
    if [[ ! -z $DEBUG || $REMOVE -eq 1 ]]
    then
        read -p "This installer will REMOVE any files located in the following directories:
        * /opt/dvm
        * /opt/dvmfirmware-hs
        
        Are you sure you want to continue? [Y/N]: " resp2
        case $resp2 in
            Y | y)
              
              if [[ $REMOVE -eq 1 ]]
              then
                write_log_event "--rm commandline option selected, removing all Centrunk components..."
              elif [[ ! -z $DEBUG ]]
              then
                write_log_event "Removing files..."
              fi
              
              rm -rf $INSTALL_LOC
              rm -rf $FW_DIR
              write_log_event "Cleaned install directory $INSTALL_LOC and $FW_DIR."
              sleep 1
              write_log_event "Disabling and removing the Centrunk Service..."
              if [[ -f /etc/systemd/system/centrunk.service ]]
              then
                systemctl stop centrunk.service
                systemctl disable centrunk.service
                rm -rf /etc/systemd/system/centrunk.service
              elif [[ -f /etc/systemd/system/p25.service ]]
              then
                write_log_event "Found previous versions of the systemd unit file...cleaning up..."
                systemctl stop p25.service
                systemctl disable p25.service
                rm -rf /etc/systemd/system/p25.service
              fi
              ;;
            N | n)
              echo "Stopping install...Nothing was changed."
              exit 42
              ;;
            *)
              write_log_event "Invalid entry, see help below..."
              usage
              exit 96
              ;;
        esac
    fi

}

write_log_event()
{
  echo "[LOG]: " $(date +"%Y-%m-%d_%H-%M-%S")": $1" >> /var/log/centrunk_install.log
  echo $1
}

write_debug()
{
  echo "[DEBUG]: " $(date +"%Y-%m-%d_%H-%M-%S")": $1" >> /var/log/centrunk_install.log
}

write_stderr()
{
  echo "[STDERR]: " $(date +"%Y-%m-%d_%H-%M-%S")": $1" >> /var/log/centrunk_install.log

}

replace_config()
{
    write_log_event "Starting configuration file reconfiguration!"
    sed -i "s/EQUIP_ID/$EQUIP_ID/g" $1
    sed -i "s/IP_ADDRESS/$IP_ADDRESS/g" $1
    sed -i "s/RCON_PORT/$RCON_PORT/g" $1
    sed -i "s/PATH_TO_MODEM/${PATH_TO_MODEM//\//\\/}/g" $1
    sed -i "s/CHANNEL_ID/$CID/g" $1
    sed -i "s/RFSS_ID/$RFSS_ID/g" $1
    sed -i "s/SITE_ID/$SITE_ID/g" $1
    sed -i "s/SYS_ID/$SYS_ID/g" $1
    sed -i "s/NET_ID/$NET_ID/g" $1
    sed -i "s/NAC_CODE/$NAC_CODE/g" $1
    sed -i "s/SUPER_GROUP/$SUPER_GROUP/g" $1
    sed -i "s/CHANNEL_NUMBER/$CHID/g" $1
    sed -i "s/VCN/$VCN/g" $1
    # this is sed'd in for "security"
    sed -i "s/REDACTED/CENTRUNK/g" $1
    sed -i "s/P_CENTRUNK/62030/g" $1
    write_log_event "Done replacing default values in config."
} 2>write_stderr

usage()
{
    echo "centrunk_installer 
    [--voice|--control|--voc 
    --id <EQUIP_ID> 
    --ip <IP_ADDRESS> 
    --rcon <RCON_PORT>
    --uart <PATH_TO_MODEM>
    --channel <UHF|VHF|800|700|900>
    --rfss <RFSS_ID>
    --site <SITE_ID>  
    --sys <SYS_ID>
    --net <NET_ID>
    --nac <NAC_CODE>
    --atg <SUPER_GROUP>
    
    --zt <ZEROTIER_ID>
    --chid <CHANNEL_NUMBER>
    --vcn <VOICE_CHANNEL_NUMBER>
    --help
    [--flash]]
    | [--interactive]
    | [--rm]
    | [--file <VAR_FILE>]
    "
}

install_centrunk()
{
  write_log_event "Actually starting the install now!"
  sleep 1
  echo "You may see a bunch of shit you may or may not recognize
  Don't worry about it. It's the program installing and creating itself. Woo!"
  sleep 3

  clean_environment

  cd $BASE_DIR

  write_log_event "Cloning DVMhost from GitHub..."
  git clone $GIT_URL $INSTALL_LOC

  cd $INSTALL_LOC

  #build the boi

  write_log_event "Building dvmhost...this may take some time..."
  set -e
  make
  set +e
  write_log_event "Finished building dvmhost."

  #fixup perms
  write_log_event "Permissions updating..."
  chmod +x start-dvm.sh stop-dvm.sh dvm-watchdog.sh stop-watchdog.sh

  #install default configs from git

  write_log_event "Checking out default configurations from GitHub..."
  git clone $CONFIG_REPO $CONFIG_DIR

  #handle config based on responsess

  case $TYPE in
      VOICE)
        cp $CONFIG_DIR/ct-vc.yml $INSTALL_LOC/config.centrunk.yml
        replace_config "$INSTALL_LOC/config.centrunk.yml"
        ;;
      CONTROL)
        cp $CONFIG_DIR/ct-cc-dedicated.yml $INSTALL_LOC/config.centrunk.yml
        replace_config "$INSTALL_LOC/config.centrunk.yml"
        ;;
      VOC)
        cp $CONFIG_DIR/ct-voc.yml $INSTALL_LOC/config.centrunk.yml
        replace_config "$INSTALL_LOC/config.centrunk.yml"
        ;;
      *)
        write_log_event "User has somehow gotten to a place they shouldn't. See code, line 279."
        echo "How did you get here?"
        exit 69
        ;;
  esac



  #install the unit file

  write_log_event "Installing the Centrunk systemd Service..."
  
  if [[ -f /etc/systemd/system/centrunk.service ]]
  then
    systemctl stop centrunk.service
    systemctl disable centrunk.service
    rm -rf /etc/systemd/system/centrunk.service
  fi

  cp $CONFIG_DIR/p25.service /etc/systemd/system/centrunk.service
  write_log_event "Updating permissions on the Service..."
  chmod 664 /etc/systemd/system/centrunk.service
  systemctl daemon-reload
  write_log_event ""
  systemctl enable centrunk.service
  #output commands
  write_log_event "!!!DVMhost install completed.!!!"


  # ollie outie if we aren't flashing

  if [[ $FLASH -ne 1 ]]
  then
      write_log_event "Not flashing the modem per user input...Quitting..."
      echo "Not flashing the modem...exiting..."
      exit 0
  else
      write_log_event "Flashing the modem....Please standby while we gather some files..." 
  fi

  write_log_event "Entering the Firmware Block..."
  ###### FIRMWARE BLOCK #####
  #clone out the firmware and tools
  write_log_event "Cloning firmware from GitHub..."
  cd /opt
  git clone $FW_GIT_URL
  cd $FW_DIR
  git clone $FW_TOOLS_F10X

  write_log_event "Starting the firmware build process..."
  #build the firmware
  echo "Building the firmware in 5 seconds..."
  sleep 5
  set -e
  make -f Makefile.STM32FX mmdvm-hs-hat-dual
  set +e
  write_log_event "Firmware build completed!"

  #flash the firmware
  write_log_event "About to flash the firmware..."
  write_log_event "User has elected to flash firmware...Proceeding..."
  echo "FLASHING NOW. DO NOT REMOVE POWER!"
  if [[ -f dvm-firmware-hs_f1.bin ]]
  then
    set -e
    stm32flash -v -w dvm-firmware-hs_f1.bin -i 20,-21,21,-20 -R $PATH_TO_MODEM -b 115200
    set +e
    write_log_event "Flash completed..."
  fi
  write_log_event "Done with Flash Block..."

  ##### ZEROTIER BLOCK #####

  write_log_event "Entering zerotier installation..."

  write_log_event "Ensuring ZeroTier is installed..."
  if [ -x "$(command -v zerotier-cli)" ]
  then
      write_log_event "ZeroTier is already installed, joining the network..."
      zerotier-cli join $ZEROTIER
  else
      write_log_event "ZeroTier is not installed, installing now..."
      curl -s https://install.zerotier.com/ | bash
      zerotier-cli join $ZEROTIER
  fi

  echo "Everything should be done installing...
  To start dvmhost, run \"sudo systemctl start centrunk.service\""
  exit 0
} 2>write_stderr 

echo "Welcome to the Centrunk Installer." 
echo "The options you selected are as follows: "
write_log_event "Beginning installation..."

##### VARIABLE ASSIGNMENT #####

POSITIONAL_ARGS=()
write_log_event "Command line install selected...Reading in variables..."
while [[ $# -gt 0 ]]; do
  case $1 in
    --debug)
      DEBUG=1
      shift
      ;;  
    --file)
      VAR_FILE=$2
      shift
      shift
      ;; 
    --rm)
      UNINSTALL=1
      shift
      ;;   
    --interactive)
      INTERACTIVE=1
      shift
      ;;   
    --zt)
      ZEROTIER=$2
      shift
      shift
      ;;
    --flash)
      FLASH=1
      shift
      ;;
    --voice)
      TYPE=VOICE
      shift # past argument
      ;;
    --control)
      TYPE=CONTROL
      shift # past argument
      ;;
    --voc)
      TYPE=VOC
      shift
      ;;
    --id)
      EQUIP_ID="$2"
      shift
      shift
      ;;
    --ip)
      IP_ADDRESS="$2"
      shift
      shift
      ;;
    --rcon)
      RCON_PORT="$2"
      shift
      shift
      ;;
    --uart)
      PATH_TO_MODEM="$2"
      shift
      shift
      ;;
    --channel)
      case $2 in
        UHF)
          CID=2
          ;;
        VHF)
          CID=3
          ;;
        800)
          CID=0
          ;;
        700)
          CID=1
          ;;
        900)
          CID=15
          ;;
        *)
          usage
          exit 1
          ;;
      esac
      shift
      shift
      ;;
    --rfss)
      RFSS_ID="$2"
      shift
      shift
      ;;
    --site)
      SITE_ID="$2"
      shift
      shift
      ;;
    --sys)
      SYS_ID="$2"
      shift
      shift
      ;;
    --net)
      NET_ID="$2"
      shift
      shift
      ;;
    --nac)
      NAC_CODE="$2"
      shift
      shift
      ;;
    --atg)
      SUPER_GROUP="$2"
      shift
      shift
      ;;
    --chid)
      CHID="$2"
      shift
      shift
      ;;
    --vcn)
      VCN="$2"
      shift
      shift
      ;;
    --help)
      usage
      exit 1
      ;;
    -*|--*)
      usage
      exit 1
      ;;
    *)
      POSITIONAL_ARGS+=("$1") # save positional arg
      shift # past argument
      ;;
  esac
done

if [[ $INTERACTIVE -eq 1 ]]
then
    write_log_event "Wacker Mode Engaged..."
    echo \
    "Welcome to wacker mode...I mean Interactive Mode.
    
    This is a mode used for 1 on 1 installs, or if you know your values and want to enter them quickly.
    
    First off, let's get some information..."

    read -p "Is this your only hotspot that you will be connecting to Centrunk? [Y/N]: " respA

    while true
    do
        case $respA in
            Y | y)
            TYPE=VOC
            break
            ;;
            N | n)
                while true
                do
                    read -p "Is this a Voice or Control Channel? [V/C]: " respA1
                    case $respA1 in
                        V)
                            TYPE=VOICE
                            break
                        ;;
                        C)
                            TYPE=CONTROL
                            break
                        ;;
                        *)
                            continue
                        ;;
                    esac

                done
            break
            ;;
            *)
                continue        
            ;;
        esac  
    done

    echo "Thanks for that information. Next up we'll be grabbing some defaults to get you started..."

    read -p "I need your ZeroTier connection ID. Ask for this in Discord. : " ZEROTIER

    read -p "Then, I'll need the FNE's IP address. Ask for this in Discord. : " IP_ADDRESS

    read -p "Next, I'll need to know the location of your modem: " PATH_TO_MODEM

    echo "Okay, just a few more, I promise..."

    read -p "RFSS ID: " RFSS_ID

    read -p "Site ID: " SITE_ID

    read -p "System ID: " SYS_ID

    read -p "Network ID: " NET_ID

    read -p "NAC (Network Access Code): " NAC_CODE

    read -p "Super Group: " SUPER_GROUP

    read -p "Are we flashing a hotspot today? **WARNING** ONLY MMDVM-DUAL-HAT IS SUPPORTED AT THIS TIME **WARNING** IF YOU ARE UNSURE PRESS N! [Y/N]: " respA


    while true
    do
        case $respA in
            Y | y)
            FLASH=1
            write_log_event "User selected to flash."
            break
            ;;
            N | n)
            FLASH=0
            write_log_event "User selected not to flash."
            break
            ;;
            *)
                echo "Please type Y or N. "
                read -p "Are we flashing a hotspot today? **WARNING** ONLY MMDVM-DUAL-HAT IS SUPPORTED AT THIS TIME **WARNING** IF YOU ARE UNSURE PRESS N! [Y/N]: " respA
                continue        
            ;;
        esac  
    done

    echo "Please wait while the hamster wheels are turning..."

    echo "Just a few more questions, then we'll on our way!"

    read -p "Select the following from the menu
    
    [0]: 800 MHz
    [1]: 700 MHz
    [2]: 420-470 MHz (UHF)
    [3]: 136-174 MHz (VHF)
    [15]: 900 MHz
    
    Your response: " CID

    read -p "RCON Port (You'll get this from Discord): " RCON_PORT

    echo "The next two you will need to have calculated based on your hotspot's TX/RX frequency."

    read -p "Channel ID: " CHID

    read -p "Voice Channel: " VCN

    # prompt for channel number and voice channel number

    # prompt for RCON port
    read -p "Last one! Equipment ID: " EQUIP_ID
    # prompt for equipment ID
    write_log_event "Finished gathering variables for wacker mode."
    echo "Alright we're done gathering information. Please sit back and relax while we set everything up for you."
elif [[ ! -z $VAR_FILE ]]
then
  write_log_event "Configuration File Install selected..."
  source $VAR_FILE
else
  
  write_log_event "Commandline Install Selected..."
  echo \
  "TYPE=$TYPE
  ZT=$ZEROTIER
  EQUIP_ID=$EQUIP_ID
  IP_ADDRESS=$IP_ADDRESS
  RCON_PORT=$RCON_PORT
  UART=$PATH_TO_MODEM
  CHANNEL=$CID
  RFSS_ID=$RFSS_ID
  SITE_ID=$SITE_ID
  SYS_ID=$SYS_ID
  NET_ID=$NET_ID
  NAC=$NAC_CODE
  ATG=$SUPER_GROUP
  FLASH=$FLASH
  CHANNELID=$CHID
  VOICECHANNEL=$VCN"

  write_log_event \
  "TYPE=$TYPE\n
  ZT=$ZEROTIER\n
  EQUIP_ID=$EQUIP_ID\n
  IP_ADDRESS=$IP_ADDRESS\n
  RCON_PORT=$RCON_PORT\n
  UART=$PATH_TO_MODEM\n
  CHANNEL=$CID\n
  RFSS_ID=$RFSS_ID\n
  SITE_ID=$SITE_ID\n
  SYS_ID=$SYS_ID\n
  NET_ID=$NET_ID\n
  NAC=$NAC_CODE\n
  ATG=$SUPER_GROUP\n
  FLASH=$FLASH\n\n
  CHANNELID=$CHID
  VOICECHANNEL=$VCN"



  read -p "Are these values correct? [Y/N]: " resp2

  case $resp2 in
      Y | y)
        write_log_event "User has elected to continue."
        ;;
      N | n)
        write_log_event "User has elected to exit."
        exit 96
        ;;
      *)
        write_log_event "Invalid entry, displaying help to user."
        usage
        exit 96
        ;;
  esac
  ##### /VARIABLES #####
fi

install_centrunk

##### DVM BLOCK #####



